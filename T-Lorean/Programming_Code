#define leftMotor    OUT_B
#define rightMotor   OUT_C
#define sonarSensor  IN_1

const int DETECTION_THRESHOLD = 40;     // Distance to detect opponent
const int ALIGNMENT_MARGIN = 3;         // Variation margin to consider alignment
const int TURN_SPEED = 50;
const int ATTACK_SPEED = 100;
const int READING_INTERVAL = 100;       // Sonar reading interval

task main() {
    SetSensorLowspeed(sonarSensor);     // Configure ultrasonic sensor
    Wait(3000);                          // Wait 3 seconds before starting

    while(true) {
        int distance = SensorUS(sonarSensor);

        if (distance <= DETECTION_THRESHOLD && distance > 0) {
            // Track and attack
            int d1 = SensorUS(sonarSensor);
            Wait(READING_INTERVAL);
            int d2 = SensorUS(sonarSensor);
            int variation = d2 - d1;

            if (abs(variation) <= ALIGNMENT_MARGIN) {
                // Aligned â†’ attack straight
                OnRev(leftMotor, ATTACK_SPEED);   // Reversed to move forward
                OnRev(rightMotor, ATTACK_SPEED);  // Reversed to move forward
                Wait(1500);
                Off(OUT_BC);
            }
            else if (variation > 0) {
                // Turn right
                OnRev(leftMotor, TURN_SPEED);     // Turns right
                OnFwd(rightMotor, TURN_SPEED);
                Wait(200);
                Off(OUT_BC);
            }
            else {
                // Turn left
                OnFwd(leftMotor, TURN_SPEED);
                OnRev(rightMotor, TURN_SPEED);    // Turns left
                Wait(200);
                Off(OUT_BC);
            }
        } else {
            // Search for opponent by spinning clockwise
            OnFwd(leftMotor, TURN_SPEED);
            OnRev(rightMotor, TURN_SPEED);
        }
    }
}
